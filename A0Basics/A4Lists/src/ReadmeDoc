/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Lists basics

// List is an abstract data type

// Interface List<E>
// Type Parameters:
// E - the type of elements in this list

// All Superinterfaces:
// Collection<E>, Iterable<E>

// All Known Implementing Classes:
// (AbstractList, ArrayList), AttributeList, CopyOnWriteArrayList, (AbstractSequentialList, LinkedList), RoleList, RoleUnresolvedList, Stack, Vector

// In order to create "arrays" you need to use classes that implement the List interface above, ArrayList and LinkedList are briefly presented bellow:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ARRAY LIST: The ArrayList class is a resizable array, which can be found in the java.util package. The difference between a built-in array and an ArrayList in Java,
// is that the size of an array cannot be modified (if you want to add or remove elements to/from an array, you have to create a new one) while elements can be added
// and removed from an ArrayList whenever you want.

// public class ArrayList<E>
// extends AbstractList<E>
// implements List<E>, RandomAccess, Cloneable, Serializable

// Using ArrayList to create a list of string objects:

// ArrayList<String> cars = new ArrayList<String>();

// You must use wrapper classes for creating ArrayList with primitive data types (the list can only store objects):

// ArrayList<int> myNumbers = new ArrayList<int>(); // Invalid
// ArrayList<Integer> myNumbers = new ArrayList<Integer>(); // Valid

// Java Wrapper classes provide a way to use primitive data types (int, boolean, etc..) as objects. You can use toString() method to convert wrapper objects to strings.
// For more details on wrapper classes check Collections/Implementations section

// byte	    Byte
// short	Short
// int	    Integer
// long	    Long
// float	Float
// double	Double
// boolean	Boolean
// char	    Character

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LINKED LIST: The LinkedList class is almost identical to the ArrayList

// public class LinkedList<E>
// extends AbstractSequentialList<E>
// implements List<E>, Deque<E>, Cloneable, Serializable

// ArrayList vs. LinkedList:

// The LinkedList class is a collection which can contain many objects of the same type, just like the ArrayList. The LinkedList class has all of the same methods as
// the ArrayList class because they both implement the List interface!!! This means that you can add items, change items, remove items and clear the list in the same way.

// However, while the ArrayList class and the LinkedList class can be used in the same way, they are built very differently. The ArrayList class has a regular array
// inside it. When an element is added, it is placed into the array. If the array is not big enough, a new, larger array is created to replace the old one and the old
// one is removed!!!

// The LinkedList stores its items in "containers". The list has a link to the first container and each container has a link to the next container in the list.
// When adding new element to the list, the element is placed into a new container and that container is linked to one of the other containers in the LinkedList
// (depending on where it was added). e.g [1 -> 3 -> 4] when adding 2 at index 1 the relink is redone as [1 -> 2 -> 3 -> 4]

// It is best to use an ArrayList when:

// You want to access random items frequently
// You only need to add or remove elements at the end of the list

// It is best to use a LinkedList when:

// You only use the list by looping through it instead of accessing random items
// You frequently need to add and remove items from the beginning or middle of the list

// LinkedList additional methods:

// addFirst()
// addLast()
// removeFirst()
// removeLast()
// getFirst()
// getLast()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITERATOR: An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet. It is called an "iterator" because "iterating" is the
// technical term for looping. The iterator() method of ArrayList (for LinkedList equivalent methods: descendingIterator() or listIterator()) can be used to get an
// Iterator for any collection. To loop through a collection, use the hasNext() and next() methods of the Iterator:

// ArrayList<String> cars = new ArrayList<String>();
//         Iterator<String> it = cars.iterator(); // method
//         while (it.hasNext()) {
//             System.out.println(it.next());
//         }

// Iterators are designed to easily change the collections that they loop through. The remove() method can remove items from a collection while looping.
// Example: Use an iterator to remove numbers less than 10 from a collection:

// [12,8,2,23]

// public static void iterator() {
//     ArrayList<Integer> numbers = new ArrayList<Integer>();
//     numbers.add(12);
//     numbers.add(8);
//     numbers.add(2);
//     numbers.add(23);
//     Iterator<Integer> it = numbers.iterator();
//     while (it.hasNext()) {
//         Integer i = it.next();
//         if (i < 10) {
//             it.remove(); // method of iterator
//         }
//     }
//     System.out.println(numbers);
// }

// Result: [12, 23]

// Note: Trying to remove items using a for loop or a for-each loop would not work correctly because the collection is changing size at the same time that the code is
// trying to loop!!!

// public static void noIterator() {
//     ArrayList<Integer> numbers = new ArrayList<Integer>();
//     numbers.add(12);
//     numbers.add(8);
//     numbers.add(2);
//     numbers.add(23);

//     for (int i = 0; i < numbers.size(); i++) {
//         int x = numbers.get(i);
//         if (x < 10) {
//             numbers.remove(i);
//         }
//     }
//     System.out.println(numbers);
// }

// Result: [12, 2, 23]

/////
// ListIterator
// A ListIterator has no current element; its cursor position always lies between the element that would be returned by a call to previous() and the element that would
// be returned by a call to next()!!! Note that the remove() and set(Object) methods are not defined in terms of the cursor position; they are defined to operate on
// the last element returned by a call to next() or previous().

// previous() method is specific only to ListIterator. This method the previous element in the list and moves the cursor position backwards. This method may be called
// repeatedly to iterate through the list backwards, or intermixed with calls to next() to go back and forth. (Note that alternating calls to next and previous will
// return the same element repeatedly.)

// ListIterator is great for surfing through LinkedLists